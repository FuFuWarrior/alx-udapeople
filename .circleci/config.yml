version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        type: string
        default: "Hello World"  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # use aws cli to terminate cloudformation stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      to:
        type: string
        default: "Hello World"    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
             SUCCESS=$(curl --insecure "https://kvdb.io/X8AvJuBJmaFNQRf6CeZh4c/migration_${CIRCLE_WORKFLOW_ID:0:7}") 
            if(( $SUCCESS==0 )); 
            then
              cd ~/project/backend
              npm install
            # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
  
  dependencies:
    description: Install needed dependencies
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-frontend-build
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
     - checkout
     - run:
         name: test-backend-build
         command: |
           cd backend
           npm install
           npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-frontend-build
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - run:
         name: scan-backend-build
         command: |
           cd backend
           npm audit fix --audit-level=critical --force
          #  npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`Backend-DNS-Name\`].Value" \
              --no-paginate --output text >> .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
      - destroy-environment
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image : python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["97:df:e3:93:cf:f1:1a:c5:82:39:71:18:04:b9:6a:ac"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update openssh-client git
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure 
  
  run-migrations:
      docker:
         - image: sleavely/node-awscli:14.x
      steps:
         - checkout
         - restore_cache:
             keys:
              - backend-build
         - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
         - run:
            name: Send migration status to kvdb.io
            command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/X8AvJuBJmaFNQRf6CeZh4c/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              else
                curl https://kvdb.io/X8AvJuBJmaFNQRf6CeZh4c/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '0'
              fi
         - destroy-environment
         - revert-migrations
  
  deploy-frontend:
     docker:
        - image: cimg/node:13.14.0
     steps:
        - checkout
        - restore_cache:
            keys:
              - frontend-build
        - dependencies
        - run:
            name: Get backend url
            command: |
                BACKEND_IP=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`Backend-DNS-Name\`].Value" \
                --no-paginate --output text)
                echo "API_URL=${API_URL}" >> frontend/.env
        - run:
            name: deploy frontend objects
            command: |
                cd frontend
                npm install
                npm run build
                tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        #- revert-migrations
        
  deploy-backend:
     docker:
        - image: python:3.7-alpine3.11
     steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["97:df:e3:93:cf:f1:1a:c5:82:39:71:18:04:b9:6a:ac"]
        - attach_workspace: 
            at: ~/
        - restore_cache:
            keys:
              - build-backend
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible 
              apk add --update nodejs 
              apk add --update npm 
              apk add --update tar 
              apk add --update gzip
              apk add --update openssh-client git
              pip3 install awscli
        - run:
           name: Deploy backend
           command: |
              cd backend
              npm i
              npm run build
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i inventory.txt deploy-backend.yml
        #- destroy-environment
        #- revert-migrations
      
    
  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - run:
          name: Backend smoke test
          command: |
             BACKEND_IP=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`Backend-DNS-Name\`].Value" \
                --no-paginate --output text)
             API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}/api/status"
             curl -s "${API_URL}/api/status" | "grep ok"
             
      #- destroy-environment
      #- revert-migrations
  
  
  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      #- destroy-environment
      #- revert-migrations
         
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires : [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend, scan-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure, run-migrations]
      - deploy-backend:
          requires: [configure-infrastructure, run-migrations]
      - smoke-test-frontend:
          requires: [deploy-frontend]
      - smoke-test-backend:
          requires: [deploy-backend]